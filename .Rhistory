?data.frame
df <- data.frame((1:n), row.names = "i")
df <- data.frame((1:n), row.names = c("i"))
df <- data.frame((1:n), row.names = c("index"))
df <- data.frame((1:n), col.names = c("index"))
df
df <- data.frame(index=(1:n))
df
dnorm
?dnorm
?norm
?rnorm
df$input <- rnorm(10, 50,15)
df
monte_carlo <- function(n, mean, sigma, fun)
{
df <- data.frame(index=(1:n))
df$input <- rnorm(10, 50,15)
df$ouput <-do.call(fun, list(df$input))
return(mean(df$output))
}
monte_carlo(100,m,s,"profit_calc")
df
df[,1]
df[2,1]
monte_carlo <- function(n, mean, sigma, fun)
{
df <- data.frame(index=(1:n))
df$input <- rnorm(10, 50,15)
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2]))
}
return(mean(df$output))
}
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo <- function(n, mean, sigma, fun)
{
df <- data.frame(index=(1:n))
df$input <- pnorm(10, 50,15)
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2]))
}
return(mean(df$output))
}
monte_carlo(100,m,s,"profit_calc")
monte_carlo <- function(n, mean, sigma, fun)
{
df <- data.frame(index=(1:n))
df$input <- rnorm(10, mean,sigma)
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2]))
}
return(mean(df$output))
}
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
monte_carlo(100,m,s,"profit_calc")
m <- 50
s <- 15
n<-1000
profit_calc <- function(demand)
{
order <- 60
if(order<demand)
{
return(order * (2.5-1.5))
}
return(demand*(2.5-1.5) + (order-demand)*(-1))
}
monte_carlo <- function(n, mean, sigma, fun)
{
df <- data.frame(index=(1:n))
df$input <- rnorm(10, mean,sigma)
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2]))
}
return(mean(df$output))
}
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo <- function(n, mean, sigma, fun)
{
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2]))
}
return(mean(df$output))
}
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
monte_carlo(n,m,s,"profit_calc")
profit_calc <- function(demand, order)
{
if(order<demand)
{
return(order * (2.5-1.5))
}
return(demand*(2.5-1.5) + (order-demand)*(-1))
}
order<-60
profit_calc <- function(demand, order)
{
if(order<demand)
{
return(order * (2.5-1.5))
}
return(demand*(2.5-1.5) + (order-demand)*(-1))
}
profit_calc(75,order)
profit_calc(55,order)
profit_calc(54,order)
profit_calc(56,order)
monte_carlo <- function(n, mean, sigma, fun, args)
{
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],args))
}
return(mean(df$output))
}
monte_carlo <- function(n, mean, sigma, fun, args)
{
if(is.list(args)==FALSE)
{
cat "Error! The args should be a list of values to compare";
return(0)
}
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
out<-c()
for(j in args)
{
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],j))
}
out<-c(out, mean(df$output))
}
return(out)
}
monte_carlo <- function(n, mean, sigma, fun, args)
{
if(is.list(args)==FALSE)
{
cat "Error! The args should be a list of values to compare";
return(0)
}
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
out<-c()
for(j in list(args))
{
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],j))
}
out<-c(out, mean(df$output))
}
return(out)
}
m <- 50
s <- 15
n<-1000
order<-60
profit_calc <- function(demand, order)
{
if(order<demand)
{
return(order * (2.5-1.5))
}
return(demand*(2.5-1.5) + (order-demand)*(-1))
}
monte_carlo <- function(n, mean, sigma, fun, args)
{
if(is.list(args)==FALSE)
{
cat "Error! The args should be a list of values to compare";
return(0)
}
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
out<-c()
for(j in list(args))
{
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],j))
}
out<-c(out, mean(df$output))
}
return(out)
}
m <- 50
s <- 15
n<-1000
order<-60
profit_calc <- function(demand, order)
{
if(order<demand)
{
return(order * (2.5-1.5))
}
return(demand*(2.5-1.5) + (order-demand)*(-1))
}
monte_carlo <- function(n, mean, sigma, fun, args)
{
if(is.list(args)==FALSE)
{
cat "Error! The args should be a list of values to compare";
return(0)
}
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
out<-c()
for(j in c(args))
{
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],j))
}
out<-c(out, mean(df$output))
}
return(out)
}
monte_carlo <- function(n, mean, sigma, fun, args)
{
if(is.list(args)==FALSE)
{
cat "Error! The args should be a list of values to compare";
return(0)
}
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
out<-c()
for(j in c(args))
{
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],j))
}
out<-c(out, mean(df$output))
}
return(out)
}
monte_carlo <- function(n, mean, sigma, fun, args)
{
if(is.list(args)==FALSE)
{
cat("Error! The args should be a list of values to compare");
return(0)
}
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
out<-c()
for(j in c(args))
{
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],j))
}
out<-c(out, mean(df$output))
}
return(out)
}
monte_carlo(n,m,s,"profit_calc",c(100))
m <- 50
s <- 15
n<-1000
order<-60
profit_calc <- function(demand, order)
{
if(order<demand)
{
return(order * (2.5-1.5))
}
return(demand*(2.5-1.5) + (order-demand)*(-1))
}
monte_carlo <- function(n, mean, sigma, fun, args)
{
if(is.list(args)==FALSE)
{
cat("Error! The args should be a list of values to compare");
return()
}
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
out<-c()
for(j in c(args))
{
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],j))
}
out<-c(out, mean(df$output))
}
return(out)
}
monte_carlo(n,m,s,"profit_calc",c(100))
m <- 50
s <- 15
n<-1000
order<-60
profit_calc <- function(demand, order)
{
if(order<demand)
{
return(order * (2.5-1.5))
}
return(demand*(2.5-1.5) + (order-demand)*(-1))
}
monte_carlo <- function(n, mean, sigma, fun, args)
{
if(is.list(args)==FALSE)
{
return("Error! The args should be a list of values to compare");
}
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
out<-c()
for(j in c(args))
{
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],j))
}
out<-c(out, mean(df$output))
}
return(out)
}
monte_carlo(n,m,s,"profit_calc",c(100))
monte_carlo <- function(n, mean, sigma, fun, args)
{
if(is.vector(args)==FALSE)
{
return("Error! The args should be a list of values to compare");
}
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
out<-c()
for(j in c(args))
{
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],j))
}
out<-c(out, mean(df$output))
}
return(out)
}
monte_carlo(n,m,s,"profit_calc",c(100))
monte_carlo(n,m,s,"profit_calc",c(100))
monte_carlo(n,m,s,"profit_calc",c(100))
monte_carlo(n,m,s,"profit_calc",c(100))
monte_carlo(n,m,s,"profit_calc",c(100))
monte_carlo(n,m,s,"profit_calc",c(100))
m <- 50
s <- 15
n<-1000
order<-60
profit_calc <- function(demand, order)
{
if(order<demand)
{
return(order * (2.5-1.5))
}
return(demand*(2.5-1.5) + (order-demand)*(-1))
}
monte_carlo <- function(n, mean, sigma, fun, args)
{
if(is.vector(args)==FALSE)
{
return("Error! The args should be a list of values to compare");
}
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
out<-c()
for(j in c(args))
{
cat(j)
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],j))
}
out<-c(out, mean(df$output))
}
return(out)
}
monte_carlo(n,m,s,"profit_calc",c(100))
monte_carlo(n,m,s,"profit_calc",c(100,60,50))
m <- 50
s <- 15
n<-1000
order<-60
profit_calc <- function(demand, order)
{
if(order<demand)
{
return(order * (2.5-1.5))
}
return(demand*(2.5-1.5) + (order-demand)*(-1))
}
monte_carlo <- function(n, mean, sigma, fun, args)
{
if(is.vector(args)==FALSE)
{
return("Error! The args should be a list of values to compare");
}
df <- data.frame(index=(1:n))
df$input <- rnorm(n, mean,sigma)
out<-c()
for(j in c(args))
{
df$output <- df$input
for(i in 1:n){
df[i,3] <- do.call(fun, list(df[i,2],j))
}
out<-c(out, mean(df$output))
}
return(out)
}
monte_carlo(n,m,s,"profit_calc",40:70)
monte_carlo(n,m,s,"profit_calc",40:70)
monte_carlo(n,m,s,"profit_calc",40:70)
n<-10000
monte_carlo(n,m,s,"profit_calc",40:70)
a<-monte_carlo(n,m,s,"profit_calc",40:70)
plot(a)
a<-monte_carlo(2000,m,s,"profit_calc",45:60)
plot(a)
max(a)
a[a==max(a)]
a==max(a)
which.max(a)
45+which.max(a)
install.packages("OpenNLP")
install.packages("openNLP")
install.packages("rJava")
install.packages("NLP")
s <- "Sometimes, the greatest adventures in life are internal. This work represents such an adventure. It's a journey through the unseen dimensions of mind and spirit. I can attest to the reality of the events described herein. They are not fictional. The journey isn't new. It's been the quest of millions of persons for thousands of years. But, like the uniqueness of one's fingerprints or DNA, each life story is unique."
s
library(rJava)
library(NPL)
library(openNLP)
install.packages("NLP")
library(NPL)
library(NLP)
library(openNLP)
knitr::opts_chunk$set(echo = TRUE)
model1 <- lm(data = cars, speed~dist)
summary(model1)
str(cars)
1-0.6438
3.156/0.3562
3.156/(1-0.6511)
(3.156/(1-0.6511)) - 3.156
ans
5.889572/9.045572
setwd("~/OneDrive/IIMC/Project/HaryanaSoilNutrientDataExtracter")
